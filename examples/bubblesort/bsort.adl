# Bubble sort

def main():
	local i:uint

	printf("Enter numbers to be sorted, separate with spaces: ", 0)

	dosort()

	halt()

def dosort():
	local values:byte[512]
	local i:uint
	local val:uint
	local count:uint
	local switched:uint
	local tmp:uint

	i = 0
	val = 0
	while (val & (1 << 15)) == 0:
		val = getnum()
		values[i] = val & ((1 << 15) - 1)
		i = i + 1
	count = i
	putc(10)
	printfn("Thank you, you gave me % numbers.", count)
	printfn("Now sorting...", 0)

	switched = 1
	while switched:
		switched = 0
		i = 0
		while i < (count - 1):
			if values[i] > values[i + 1]:
				tmp = values[i]
				values[i] = values[i + 1]
				values[i + 1] = tmp
				switched = 1
			i = i + 1

	i = 0
	printf("Sorted: ", 0)
	while i < count:
		putint(values[i])
		putc(32)
		i = i + 1

	return 0

def getnum():
	local num:uint
	local c:uint
	
	c = 48	# a '0' as first digit doesn't hurt
	num = 0
	while (c != 0) & (c != 10) & (c != 32):
		num = num * 10	       # shift left by one digit
		num = num + (c - 48)   # add current digit
		c = getc()			   # read new digit
	if c == 10:
		return num | (1 << 15) # Mark enter
	return num

def printfn(s:uint, val:uint):
	local retval:uint
	retval = printf(s, val)
	putc(10)
	return retval

def printf(s:uint, val:uint):
	local c:uint
	local percent:uint

	percent = peekb("%")
	c = peekb(s)
	while c:
		if c == percent:
			putint(val)
		if c != percent:
			putc(c)
		s = s + 1
		c = peekb(s)
	return 0

def putint(val:uint):
	local chars:byte[10]
	local i:uint
	local rest:uint

	if val == 0:
		putc(48)
		return 0

	i = 9
	while val:
		rest = val / 10
		chars[i] = val - (rest * 10)
		i = i - 1
		val = rest
	chars[i] = 0

	while i < 10:
		if chars[i] != 0:
			putc(48 + chars[i])
		i = i + 1
	return 0
